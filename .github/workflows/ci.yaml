name: ci

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * *'  # every day at midnight

env:
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

jobs:
  gcc_ubuntu_18_04:
    strategy:
      matrix:
        version: [4.8, 5, 6, 8]
    runs-on: ubuntu-24.04
    env:
      CPP: cpp-${{ matrix.version }}
      CC: gcc-${{ matrix.version }}
      CXX: g++-${{ matrix.version }}
    steps:
      - name: "Checkout libcdada"
        uses: actions/checkout@v3
        with:
          path: libcdada

      - name: Run tests in Ubuntu 18.04 container
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            -e CPP="${CPP}" \
            -e CC="${CC}" \
            -e CXX="${CXX}" \
            -e CONFIG_FLAGS="--disable-silent-rules" \
            ubuntu:18.04 \
            bash -c "
              set -e
              apt-get update
              apt-get install -y software-properties-common
              add-apt-repository -y ppa:git-core/ppa
              apt-get update
              apt-get install -y git
              git config --global --add safe.directory /workspace/libcdada
              ./libcdada/.github/workflows/deps.sh gcc ${{ matrix.version }}
              cd libcdada && .github/workflows/test_script.sh
              CONFIG_FLAGS=\"\$CONFIG_FLAGS --enable-debug\" .github/workflows/test_script.sh
            "

  gcc_ubuntu_22_04:
    strategy:
      matrix:
        version: [9, 10, 11, 12]
    runs-on: ubuntu-22.04
    env:
      CPP: cpp-${{ matrix.version }}
      CC: gcc-${{ matrix.version }}
      CXX: g++-${{ matrix.version }}
    steps:
      - name: "Checkout libcdada"
        uses: actions/checkout@v3
        with:
          path: libcdada

      - name: "Install deps"
        run: ./libcdada/.github/workflows/deps.sh gcc ${{ matrix.version }}

      - name: "Compile and test using GCC${{ matrix.version }}"
        run: cd libcdada && .github/workflows/test_script.sh
        env:
          CONFIG_FLAGS: --disable-silent-rules
      - name: "Compile and test using GCC${{ matrix.version }} (DEBUG)"
        run: cd libcdada && .github/workflows/test_script.sh
        env:
          CONFIG_FLAGS: --disable-silent-rules --enable-debug

  gcc_ubuntu_24_04:
    strategy:
      matrix:
        version: [13, 14]
    runs-on: ubuntu-24.04
    env:
      CPP: cpp-${{ matrix.version }}
      CC: gcc-${{ matrix.version }}
      CXX: g++-${{ matrix.version }}
    steps:
      - name: "Checkout libcdada"
        uses: actions/checkout@v3
        with:
          path: libcdada

      - name: "Install deps"
        run: ./libcdada/.github/workflows/deps.sh gcc ${{ matrix.version }}

      - name: "Compile and test using GCC${{ matrix.version }}"
        run: cd libcdada && .github/workflows/test_script.sh
        env:
          CONFIG_FLAGS: --disable-silent-rules
      - name: "Compile and test using GCC${{ matrix.version }} (DEBUG)"
        run: cd libcdada && .github/workflows/test_script.sh
        env:
          CONFIG_FLAGS: --disable-silent-rules --enable-debug

  clang_ubuntu_22_04:
    strategy:
      matrix:
        version: [11, 12, 13, 14]
    runs-on: ubuntu-22.04
    env:
      CPP: clang-cpp-${{ matrix.version }}
      CC: clang-${{ matrix.version }}
      CXX: clang++-${{ matrix.version }}
      CFLAGS: -gdwarf-4 #clang14 and on use dwarf5, but valgrind doesn't support it
      CXXFLAGS: -gdwarf-4
    steps:
      - name: "Checkout libcdada"
        uses: actions/checkout@v3
        with:
          path: libcdada

      - name: "Install deps"
        run: ./libcdada/.github/workflows/deps.sh clang ${{ matrix.version }}

      - name: "Compile and test using clang-${{ matrix.version }}"
        run: cd libcdada && .github/workflows/test_script.sh
        env:
          CONFIG_FLAGS: --disable-silent-rules
      - name: "Compile and test using clang-${{ matrix.version }} (DEBUG)"
        run: cd libcdada && .github/workflows/test_script.sh
        env:
          CONFIG_FLAGS: --disable-silent-rules --enable-debug

  clang_ubuntu_24_04:
    strategy:
      matrix:
        version: [15, 16, 17, 18, 19]
    runs-on: ubuntu-24.04
    env:
      CPP: clang-cpp-${{ matrix.version }}
      CC: clang-${{ matrix.version }}
      CXX: clang++-${{ matrix.version }}
      CFLAGS: -gdwarf-4 #clang14 and on use dwarf5, but valgrind doesn't support it
      CXXFLAGS: -gdwarf-4
    steps:
      - name: "Checkout libcdada"
        uses: actions/checkout@v3
        with:
          path: libcdada

      - name: "Install deps"
        run: ./libcdada/.github/workflows/deps.sh clang ${{ matrix.version }}

      - name: "Compile and test using clang-${{ matrix.version }}"
        run: cd libcdada && .github/workflows/test_script.sh
        env:
          CONFIG_FLAGS: --disable-silent-rules
      - name: "Compile and test using clang-${{ matrix.version }} (DEBUG)"
        run: cd libcdada && .github/workflows/test_script.sh
        env:
          CONFIG_FLAGS: --disable-silent-rules --enable-debug
