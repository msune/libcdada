#include "cdada/map.h"
#include "cdada/__common_internal.h"
#include "cdada/__map_internal.h"

#include <stdlib.h>
#include <string.h>

//DO NOT EDIT: Autogenerated with gen-srcs

using namespace std;

cdada_map_t* __cdada_map_create(const uint16_t key_size,
						__cdada_map_ops_t* ops){

	__cdada_map_int_t* m = NULL;

	if(unlikely(key_size == 0))
		return m;

	m = (__cdada_map_int_t*)malloc(sizeof(__cdada_map_int_t));
	memset(m, 0, sizeof(__cdada_map_int_t));
	m->magic_num = CDADA_MAGIC;
	m->user_key_len = key_size;

	try{
		//Custom type
		if(ops){
			m->key_len = m->user_key_len = key_size;
			m->ops = ops;
			(*m->ops->create)(m);
			return m;
		}
{{ "" }}
		{%for t in types %}
			{%- if not loop.first -%}else {% endif -%}
			if(	{%- if t[2] < 3 -%}
					key_size == {{t[2]}}
				{%- else -%}
					key_size > {{ loop.previtem[2] }} && key_size <= {{ t[2] }}
				{%- endif -%}
			){
			m->map.{{t[0]}} = new map<{{t[1]}}, void*>();
			m->key_len = {{t[2]}};
		}
		{%-endfor -%}
		else{
			goto ROLLBACK;
		}
	}catch(bad_alloc& e){
		goto ROLLBACK;
	}catch(...){
		CDADA_ASSERT(0);
		goto ROLLBACK;
	}

	return m;

ROLLBACK:
	free(m);
	return NULL;
}

/**
* Destroy a map structure
*/
int cdada_map_destroy(cdada_map_t* map){

	__cdada_map_int_t* m = (__cdada_map_int_t*)map;

	CDADA_CHECK_MAGIC(m);

	try{
		int c = m->ops? 0 : m->key_len;
		switch(c){
		{%-for t in types %}
			case {{t[2]}}:
				delete m->map.{{t[0]}};
				break;
		{%-endfor %}
			case 0:
				CDADA_ASSERT(m->ops);
				(*m->ops->destroy)(m);
				break;
			default:
				CDADA_ASSERT(0);
				return CDADA_E_UNKNOWN;
		}
	}catch(...){
		CDADA_ASSERT(0);
		return CDADA_E_UNKNOWN;
	}

	m->magic_num = 0x0;
	free(m);

	return CDADA_SUCCESS;
}

int cdada_map_clear(cdada_map_t* map){

	__cdada_map_int_t* m = (__cdada_map_int_t*)map;

	CDADA_CHECK_MAGIC(m);

	try{
		int c = m->ops? 0 : m->key_len;
		switch(c){
		{%-for t in types %}
			case {{t[2]}}:
				m->map.{{t[0]}}->clear();
				break;
		{%-endfor %}
			case 0:
				CDADA_ASSERT(m->ops);
				(*m->ops->clear)(m);
				break;
			default:
				CDADA_ASSERT(0);
				return CDADA_E_UNKNOWN;
		}
	}catch(bad_alloc& e){
		return CDADA_E_MEM;
	}catch(...){
		CDADA_ASSERT(0);
		return CDADA_E_UNKNOWN;
	}

	return CDADA_SUCCESS;
}

bool cdada_map_empty(const cdada_map_t* map){

	__cdada_map_int_t* m = (__cdada_map_int_t*)map;

	if(unlikely(!m || m->magic_num != CDADA_MAGIC))
		return false;

	try{
		int c = m->ops? 0 : m->key_len;
		switch(c){
		{%-for t in types %}
			case {{t[2]}}:
				return m->map.{{t[0]}}->empty();
		{%-endfor %}
			case 0:
				CDADA_ASSERT(m->ops);
				return (*m->ops->empty)(m);
			default:
				break;
		}
	}catch(...){}

	CDADA_ASSERT(0);
	return false;
}

uint32_t cdada_map_size(const cdada_map_t* map){

	__cdada_map_int_t* m = (__cdada_map_int_t*)map;

	if(unlikely(!m || m->magic_num != CDADA_MAGIC))
		return 0;

	try{
		int c = m->ops? 0 : m->key_len;
		switch(c){
		{%-for t in types %}
			case {{t[2]}}:
				return m->map.{{t[0]}}->size();
		{%-endfor %}
			case 0:
				CDADA_ASSERT(m->ops);
				return (*m->ops->size)(m);
			default:
				break;
		}
	}catch(...){}

	CDADA_ASSERT(0);
	return 0;
}

int _cdada_map_insert(cdada_map_t* map, const void* key, void* val,
						const bool replace){

	__cdada_map_int_t* m = (__cdada_map_int_t*)map;

	CDADA_CHECK_MAGIC(m);

	if(unlikely(!key || !val))
		return CDADA_E_INVALID;

	//NOTE: we don't want std::map insert "replace semantics", so we return
	//E_EXISTS if key is present in the map
	try{
		int c = m->ops? 0 : m->key_len;
		switch(c){
		{%-for t in types %}
			case {{t[2]}}:
				return cdada_map_insert_u<{{t[1]}}>(m,
								m->map.{{t[0]}},
								key,
								val,
								replace);
		{%-endfor %}
			case 0:
				CDADA_ASSERT(m->ops);
				return (*m->ops->insert)(m, key, val, replace);
			default:
				break;
		}
	}catch(bad_alloc& e){
		return CDADA_E_MEM;
	}catch(...){}

	CDADA_ASSERT(0);
	return CDADA_E_UNKNOWN;
}

int cdada_map_insert(cdada_map_t* map, const void* key, void* val){
	return _cdada_map_insert(map, key, val, false);
}

int cdada_map_insert_replace(cdada_map_t* map, const void* key, void* val){
	return _cdada_map_insert(map, key, val, true);
}

int cdada_map_erase(cdada_map_t* map, const void* key){

	__cdada_map_int_t* m = (__cdada_map_int_t*)map;

	CDADA_CHECK_MAGIC(m);

	if(unlikely(!key))
		return CDADA_E_INVALID;

	try{
		int c = m->ops? 0 : m->key_len;
		switch(c){
		{%-for t in types %}
			case {{t[2]}}:
				return cdada_map_erase_u<{{t[1]}}>(m,
								m->map.{{t[0]}},
								key);
		{%-endfor %}
			case 0:
				CDADA_ASSERT(m->ops);
				return (*m->ops->erase)(m, key);
			default:
				break;
		}
	}catch(bad_alloc& e){
		return CDADA_E_MEM;
	}catch(...){}

	CDADA_ASSERT(0);
	return CDADA_E_UNKNOWN;
}

int cdada_map_find(const cdada_map_t* map, const void* key, void** val){

	__cdada_map_int_t* m = (__cdada_map_int_t*)map;

	CDADA_CHECK_MAGIC(m);

	if(unlikely(!key || val == NULL))
		return CDADA_E_INVALID;

	try{
		int c = m->ops? 0 : m->key_len;
		switch(c){
		{%-for t in types %}
			case {{t[2]}}:
				return cdada_map_find_u<{{t[1]}}>(m,
								m->map.{{t[0]}},
								key,
								val);
		{%-endfor %}
			case 0:
				CDADA_ASSERT(m->ops);
				return (*m->ops->find)(m, key, val);
			default:
				break;
		}
	}catch(...){}

	CDADA_ASSERT(0);
	return CDADA_E_UNKNOWN;
}

static int __cdada_map_first_last(const cdada_map_t* map, bool first, void* key,
								void** val){

	__cdada_map_int_t* m = (__cdada_map_int_t*)map;

	CDADA_CHECK_MAGIC(m);

	if(unlikely(!key || val == NULL))
		return CDADA_E_INVALID;

	try{
		int c = m->ops? 0 : m->key_len;
		switch(c){
		{%-for t in types %}
			case {{t[2]}}:
				return cdada_map_first_last_u<{{t[1]}}>(m,
								m->map.{{t[0]}},
								first,
								key,
								val);
		{%-endfor %}
			case 0:
				CDADA_ASSERT(m->ops);
				return (*m->ops->first_last)(m, first, key,
								val);
			default:
				break;
		}
	}catch(...){}

	CDADA_ASSERT(0);
	return CDADA_E_UNKNOWN;
}

int cdada_map_first(const cdada_map_t* map, void* key, void** val){
	return __cdada_map_first_last(map, true, key, val);
}

int cdada_map_last(const cdada_map_t* map, void* key, void** val){
	return __cdada_map_first_last(map, false, key, val);
}

int cdada_map_traverse(const cdada_map_t* map, cdada_map_it f,
							void* opaque){

	__cdada_map_int_t* m = (__cdada_map_int_t*)map;

	CDADA_CHECK_MAGIC(m);

	if(unlikely(!f))
		return CDADA_E_INVALID;

	try{
		int c = m->ops? 0 : m->key_len;
		switch(c){
		{%-for t in types %}
			case {{t[2]}}:
				cdada_map_traverse_u<{{t[1]}}>(m,
								m->map.{{t[0]}},
								f,
								opaque);
				break;
		{%-endfor %}
			case 0:
				CDADA_ASSERT(m->ops);
				(*m->ops->traverse)(m, f, opaque);
				break;
			default:
				CDADA_ASSERT(0);
				return CDADA_E_UNKNOWN;
		}
	}catch(...){
		CDADA_ASSERT(0);
		return CDADA_E_UNKNOWN;
	}

	return CDADA_SUCCESS;
}

int cdada_map_rtraverse(const cdada_map_t* map, cdada_map_it f,
							void* opaque){

	__cdada_map_int_t* m = (__cdada_map_int_t*)map;

	CDADA_CHECK_MAGIC(m);

	if(unlikely(!f))
		return CDADA_E_INVALID;

	try{
		int c = m->ops? 0 : m->key_len;
		switch(c){
		{%-for t in types %}
			case {{t[2]}}:
				cdada_map_rtraverse_u<{{t[1]}}>(m,
								m->map.{{t[0]}},
								f,
								opaque);
				break;
		{%-endfor %}
			case 0:
				CDADA_ASSERT(m->ops);
				(*m->ops->rtraverse)(m, f, opaque);
				break;
			default:
				CDADA_ASSERT(0);
				return CDADA_E_UNKNOWN;
		}
	}catch(...){
		CDADA_ASSERT(0);
		return CDADA_E_UNKNOWN;
	}

	return CDADA_SUCCESS;
}

int cdada_map_dump(cdada_map_t* map, uint32_t size, char* buffer,
							uint32_t* size_used){

	__cdada_map_int_t* m = (__cdada_map_int_t*)map;
	CDADA_CHECK_MAGIC(m);

	if(!size_used || (buffer&&size ==0))
		return CDADA_E_INVALID;

	try{
		std::stringstream ss;
		ss << "{";

		int c = m->ops? 0 : m->key_len;
		switch(c){
		{%-for t in types %}
			case {{t[2]}}:
				cdada_map_dump_u<{{t[1]}}>(m, m->map.{{t[0]}},
									ss);
				break;
		{%-endfor %}
			case 0:
				CDADA_ASSERT(m->ops);
				(*m->ops->dump)(m, ss);
				break;
			default:
				CDADA_ASSERT(0);
				return CDADA_E_UNKNOWN;
		}

		ss << "}";

		*size_used = ss.str().length()+1;
		if(!buffer)
			return CDADA_SUCCESS;

		snprintf(buffer, size, "%s", ss.str().c_str());
		if(ss.str().length()+1 > size)
			return CDADA_E_INCOMPLETE;
	}catch(bad_alloc& e){
		return CDADA_E_MEM;
	}catch(...){
		CDADA_ASSERT(0);
		return CDADA_E_UNKNOWN;
	}

	return CDADA_SUCCESS;
}

int cdada_map_print(cdada_map_t* map, FILE *stream){

	__cdada_map_int_t* m = (__cdada_map_int_t*)map;
	CDADA_CHECK_MAGIC(m);

	try{
		std::stringstream ss;
		ss << "{";

		int c = m->ops? 0 : m->key_len;
		switch(c){
		{%-for t in types %}
			case {{t[2]}}:
				cdada_map_dump_u<{{t[1]}}>(m, m->map.{{t[0]}},
									ss);
				break;
		{%-endfor %}
			case 0:
				CDADA_ASSERT(m->ops);
				(*m->ops->dump)(m, ss);
				break;
			default:
				CDADA_ASSERT(0);
				return CDADA_E_UNKNOWN;
		}
		ss << "}\n";

		fprintf(stream, "%s", ss.str().c_str());
	}catch(bad_alloc& e){
		return CDADA_E_MEM;
	}catch(...){
		CDADA_ASSERT(0);
		return CDADA_E_UNKNOWN;
	}

	return CDADA_SUCCESS;
}
